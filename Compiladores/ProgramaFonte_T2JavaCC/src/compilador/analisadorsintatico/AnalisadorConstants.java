/* Generated By:JavaCC: Do not edit this line. AnalisadorConstants.java */
package compilador.analisadorsintatico;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AnalisadorConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PALAVRA_RESERVADA_PROGRAM = 1;
  /** RegularExpression Id. */
  int PALAVRA_RESERVADA_DEFINE = 2;
  /** RegularExpression Id. */
  int PALAVRA_RESERVADA_NOT = 3;
  /** RegularExpression Id. */
  int PALAVRA_RESERVADA_VARIABLE = 4;
  /** RegularExpression Id. */
  int PALAVRA_RESERVADA_IS = 5;
  /** RegularExpression Id. */
  int PALAVRA_RESERVADA_NATURAL = 6;
  /** RegularExpression Id. */
  int PALAVRA_RESERVADA_REAL = 7;
  /** RegularExpression Id. */
  int PALAVRA_RESERVADA_CHAR = 8;
  /** RegularExpression Id. */
  int PALAVRA_RESERVADA_BOOLEAN = 9;
  /** RegularExpression Id. */
  int PALAVRA_RESERVADA_EXECUTE = 10;
  /** RegularExpression Id. */
  int PALAVRA_RESERVADA_SET = 11;
  /** RegularExpression Id. */
  int PALAVRA_RESERVADA_TO = 12;
  /** RegularExpression Id. */
  int PALAVRA_RESERVADA_GET = 13;
  /** RegularExpression Id. */
  int PALAVRA_RESERVADA_PUT = 14;
  /** RegularExpression Id. */
  int PALAVRA_RESERVADA_LOOP = 15;
  /** RegularExpression Id. */
  int PALAVRA_RESERVADA_WHILE = 16;
  /** RegularExpression Id. */
  int PALAVRA_RESERVADA_DO = 17;
  /** RegularExpression Id. */
  int PALAVRA_RESERVADA_TRUE = 18;
  /** RegularExpression Id. */
  int PALAVRA_RESERVADA_FALSE = 19;
  /** RegularExpression Id. */
  int PALAVRA_RESERVADA_VERIFY = 20;
  /** RegularExpression Id. */
  int LETRAS = 21;
  /** RegularExpression Id. */
  int DIGITOS = 22;
  /** RegularExpression Id. */
  int UNDERLINE = 23;
  /** RegularExpression Id. */
  int IDENTIFICADORES = 24;
  /** RegularExpression Id. */
  int CONSTANTE_NUMERICA_INTEIRA = 25;
  /** RegularExpression Id. */
  int CONSTANTE_NUMERICA_REAL = 26;
  /** RegularExpression Id. */
  int CONSTANTE_LITERAL = 27;
  /** RegularExpression Id. */
  int SIMBOLO_ESPECIAL_PONTO = 28;
  /** RegularExpression Id. */
  int SIMBOLO_ESPECIAL_VIRGULA = 29;
  /** RegularExpression Id. */
  int SIMBOLO_ESPECIAL_ABRECHAVES = 30;
  /** RegularExpression Id. */
  int SIMBOLO_ESPECIAL_FECHACHAVES = 31;
  /** RegularExpression Id. */
  int SIMBOLO_ESPECIAL_ABRECOLCHETE = 32;
  /** RegularExpression Id. */
  int SIMBOLO_ESPECIAL_FECHACOLCHETE = 33;
  /** RegularExpression Id. */
  int SIMBOLO_ESPECIAL_ABREPARENTESES = 34;
  /** RegularExpression Id. */
  int SIMBOLO_ESPECIAL_FECHAPARENTESES = 35;
  /** RegularExpression Id. */
  int SIMBOLO_ESPECIAL_OPERADOR_MAIS = 36;
  /** RegularExpression Id. */
  int SIMBOLO_ESPECIAL_OPERADOR_MENOS = 37;
  /** RegularExpression Id. */
  int SIMBOLO_ESPECIAL_OPERADOR_DIVISAO = 38;
  /** RegularExpression Id. */
  int SIMBOLO_ESPECIAL_OPERADOR_MULTIPLICACAO = 39;
  /** RegularExpression Id. */
  int SIMBOLO_ESPECIAL_OPERADOR_POTENTIACAO = 40;
  /** RegularExpression Id. */
  int SIMBOLO_ESPECIAL_OPERADOR_DIVISAO_INTEIRA = 41;
  /** RegularExpression Id. */
  int SIMBOLO_ESPECIAL_OPERADOR_DIVISAO_INTEIRA_RESTO = 42;
  /** RegularExpression Id. */
  int SIMBOLO_ESPECIAL_OPERADOR_IGUALIGUAL = 43;
  /** RegularExpression Id. */
  int SIMBOLO_ESPECIAL_OPERADOR_DIFERENTE = 44;
  /** RegularExpression Id. */
  int SIMBOLO_ESPECIAL_OPERADOR_MENOR = 45;
  /** RegularExpression Id. */
  int SIMBOLO_ESPECIAL_OPERADOR_MAIOR = 46;
  /** RegularExpression Id. */
  int SIMBOLO_ESPECIAL_OPERADOR_MENORIGUAL = 47;
  /** RegularExpression Id. */
  int SIMBOLO_ESPECIAL_OPERADOR_MAIORIGUAL = 48;
  /** RegularExpression Id. */
  int SIMBOLO_ESPECIAL_OPERADOR_E = 49;
  /** RegularExpression Id. */
  int SIMBOLO_ESPECIAL_OPERADOR_OU = 50;
  /** RegularExpression Id. */
  int SIMBOLO_ESPECIAL_OPERADOR_NAO = 51;
  /** RegularExpression Id. */
  int SIMBOLO_ESPECIAL_COMENTARIO = 52;
  /** RegularExpression Id. */
  int CABECALHO_INVALIDO = 65;
  /** RegularExpression Id. */
  int ATRIBUICAO_INVALIDA = 66;
  /** RegularExpression Id. */
  int CONSTANTE_LITERAL_INVALIDA = 67;
  /** RegularExpression Id. */
  int IDENTIFICADOR_INVALIDO = 68;
  /** RegularExpression Id. */
  int ENTRADA_INVALIDA = 69;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int COMENTARIODELINHA = 1;
  /** Lexical state. */
  int COMENTARIODEBLOCO = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"program\"",
    "\"define\"",
    "\"not\"",
    "\"variable\"",
    "\"is\"",
    "\"natural\"",
    "\"real\"",
    "\"char\"",
    "\"boolean\"",
    "\"execute\"",
    "\"set\"",
    "\"to\"",
    "\"get\"",
    "\"put\"",
    "\"loop\"",
    "\"while\"",
    "\"do\"",
    "\"true\"",
    "\"false\"",
    "\"verify\"",
    "<LETRAS>",
    "<DIGITOS>",
    "\"_\"",
    "<IDENTIFICADORES>",
    "<CONSTANTE_NUMERICA_INTEIRA>",
    "<CONSTANTE_NUMERICA_REAL>",
    "<CONSTANTE_LITERAL>",
    "\".\"",
    "\",\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"+\"",
    "\"-\"",
    "\"/\"",
    "\"*\"",
    "\"**\"",
    "\"%\"",
    "\"%%\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"&\"",
    "\"|\"",
    "\"!\"",
    "\":-\"",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "\"\\f\"",
    "\"\\t\"",
    "\"//\"",
    "\"/*\"",
    "<token of kind 61>",
    "<token of kind 62>",
    "\"*/\"",
    "<token of kind 64>",
    "<CABECALHO_INVALIDO>",
    "<ATRIBUICAO_INVALIDA>",
    "<CONSTANTE_LITERAL_INVALIDA>",
    "<IDENTIFICADOR_INVALIDO>",
    "<ENTRADA_INVALIDA>",
  };

}
