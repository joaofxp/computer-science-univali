/* Analisador.java */
/* Generated By:JavaCC: Do not edit this line. Analisador.java */
package compilador.analisadorsintatico;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.lang.reflect.*;
import compilador.recovery.*;
import compilador.semantico.*;
import compilador.programa.Controller;

public class Analisador implements AnalisadorConstants {
        private static StringBuilder resultado = new StringBuilder();
        private static Boolean houveErro = false;
        private static Boolean houveErroSintatico = false;

        public StringBuilder syntacticErrors = new StringBuilder();
        boolean debug_recovery = true;
        boolean eof;
        Token lastError = null;
        public int contParseError = 0;

        public static AnalisadorSemantico semantico = new AnalisadorSemantico();

        public static void main(String args[]) throws ParseException {
            Analisador parser = new Analisador(System.in);
                resultado = new StringBuilder();

                parser.iniciarCompilador(parser, args, "");
        }

        public Boolean checkCategoriaNome(String categoriaNome) {
                return categoriaNome.equals("DEFAULT") || categoriaNome.equals("COMENTARIODELINHA") || categoriaNome.equals("COMENTARIODEBLOCO");
        }

        public String getLexemaCategoriaNome(int categoriaNumero) {
                String returnValue = "INVALIDO";
                Field f[] = AnalisadorConstants.class.getDeclaredFields();

                for (int i = 0; i < f.length; i++) {
                        try {
                                if (f[i].get(f[i]).equals(categoriaNumero)) {
                                        String categoriaNome = f[i].getName();
                                        if (checkCategoriaNome(categoriaNome)) {
                                                continue;

                                        } else {
                                                returnValue = f[i].getName();
                                        }
                                }
                        } catch (IllegalAccessException e) {}
                }

                return returnValue;
        }

        public void PrintLexema(Token t) {
                String categoriaNome = getLexemaCategoriaNome(t.kind);

                if (categoriaNome.indexOf("PALAVRA_RESERVADA") > -1) {
                        categoriaNome = "PALAVRA_RESERVADA";
                } else if (categoriaNome.indexOf("SIMBOLO_ESPECIAL") > -1) {
                        categoriaNome = "SIMBOLO_ESPECIAL";
                }

                switch (categoriaNome) {
                        case "ENTRADA_INVALIDA":
                                printar("ERRO DE LEXEMA: | " + t + " | na linha " + t.beginLine + " e na coluna " +
                                        t.beginColumn + ". Entrada invalida, tente novamente.");
                                    setHouveErroLexico();
                                break;
                        case "EOF":
                                printar("Lexema <EOF> indicando o fim do arquivo encontrado na linha " +
                                        t.beginLine + " e na coluna " + t.beginColumn);
                                break;
                        default:
                                printar("Lexema: | " + t + " | encontrado na linha " + t.beginLine + " e na coluna " + t.beginColumn + " da categoria " + categoriaNome + " com o numero " + t.kind);
                                break;
                }
        }

        public void printar(String mensagem) {
                resultado.append(mensagem + "\n");
        }

        public static void printarStatic(String mensagem) {
                resultado.append(mensagem + "\n");
        }

        public static void resetHouveErroLexico() {
        Analisador.houveErro = false;
    }

        public static void setHouveErroLexico() {
        Analisador.houveErro = true;
        }

        public static void setHouveErroSintatico(Boolean valor) {
            Analisador.houveErroSintatico = valor;
        }

        public void analisadorLexico() {
                try {
                        Token t = null;
                        t = getNextToken();

//			if (t.kind == EOF) {
//				printar("Insira algum lexema para compilar.");
//				return;
//			}

                        while (t.kind != EOF) {
                                String nomeToken = tokenImage[t.kind];
//				PrintLexema(t);
                                t = getNextToken();
                        }

//			PrintLexema(t);
                } catch (Error e) {
                        System.out.println(e.getMessage());
                        analisadorLexico();
                }
        }

    static public String im(int x) {
        int k;
        String s;
        s = tokenImage[x];
        k = s.lastIndexOf("\"");

        try {
            s = s.substring(1,k);
        } catch (StringIndexOutOfBoundsException e)
            {}
        return s;
    }

    public void consumeUntil(RecoverySet g, ParseException e, String errorMsg, String met) throws ParseEOFException, ParseException {
        Token tok;

//       if (debug_recovery) {
//           System.out.println("met -> " + met);
//           System.out.println("Recovery Set: " + g);
//       }

       if (g == null) throw e;

       tok = getToken(1);

       syntacticErrors.append("\n| ERRO SINTATICO |");

       while (!eof) {
            if (g.contains(tok.kind)) {
//                 if ( debug_recovery) {
//                    System.out.println("Encontrou o token: " + im(tok.kind));
//                 }
                 break;
            }

//            if (debug_recovery) {
//                System.out.println("Ignorando token: " + im(tok.kind));

//                syntacticErrors.append("\n| Causado pelo lexema: [\"" + tok + "\"] |");
//            }

            getNextToken();
            tok = getToken(1);

            if (tok.kind == EOF && ! g.contains(EOF) ) {
                eof = true;
            }
       }

        syntacticErrors.append(
            "\n| Mensagem de erro: " + errorMsg + " |" +
            "\n| na linha: " + tok.beginLine + " e na coluna: " + tok.beginColumn + " |" +
            "\n| Esperava: " + expectedTokens(e) + " | "+
            "\n| Mas encontrou: [\"" + e.currentToken.next + "\"] | \n"
        );

        contParseError++;

        if ( eof ) throw new ParseEOFException("EOF encontrado de modo prematuro.");
    }

    public static List<String> expectedTokens(ParseException e) {
        List<String> output = new ArrayList<String>();
        for (int[] group : e.expectedTokenSequences) {
            for (int tokenConst : group) {
                output.add(AnalisadorConstants.tokenImage[tokenConst]);
            }
        }
        return output;
    }

        public String iniciarCompilador(Analisador parser, String args[], String inputTexto) throws ParseException {
                Analisador analisador;
                Analisador analisadorLexico;
                Analisador analisadorSemantico;

                resultado = new StringBuilder();

                if (args.length == 0) {
                        InputStream edicaoInputStream = new ByteArrayInputStream(inputTexto.getBytes());
                        analisador = new Analisador(edicaoInputStream);
                        analisadorLexico = new Analisador(edicaoInputStream);
                        analisadorSemantico = new Analisador(edicaoInputStream);
                        parser.semantico.executar = true;
                } else if (args.length == 1) {
                        try {
                                analisador = new Analisador(new java.io.FileInputStream(args[0]));
                                analisadorLexico = new Analisador(new java.io.FileInputStream(args[0]));
                                analisadorSemantico = new Analisador(new java.io.FileInputStream(args[0]));
                        } catch (java.io.FileNotFoundException e) {
                                System.err.println(args[0] + " was not found.");
                                System.err.println(e);
                                return args[0] + " was not found.";
                        }
                } else {
                        return "Erro";
                }

        Analisador.resetHouveErroLexico();
                analisador.setHouveErroSintatico(false);

        analisadorLexico.analisadorLexico();

        if(!analisadorLexico.houveErro) {
            printar("Lexico correto");

            try {
                int analisarSintaxe = parser.analisadorSintatico();

                if(contParseError > 0) {
                    printar(String.format("Houve %s erros sintaticos: \n %s", contParseError, parser.syntacticErrors));
                } else {

                    if(analisarSintaxe == 0) {
                        printar("Sintaxe correta");

                        if(parser.semantico.erros.size() > 0) {
                            System.out.println("Houve erro semantico");
                            printar("Semantico incorreto, lista de erros: \n{\n"+this.semantico.getListaDeErrosAsString()+"}");
                            Controller.listaDeInstrucoes = new ArrayList<Instrucao>();
                        } else {
                            Controller.listaDeInstrucoes = this.semantico.getInstrucoes();
                            printar("Semantico correto");
//                            printar("Semantico correto, codigo gerado: \n{\n" + this.semantico.toString() + "}");
                        }

                        this.semantico = new AnalisadorSemantico();
                    }
                }

                if(parser.houveErroSintatico) {
                    printar("ERRO Sintatico!");
                }
            }
            catch (ParseException e) {
                printar("ERRO Sintatico!");
                printar(e.getMessage());
            }
            catch (ParseEOFException e) {
                printar("ERRO Sintatico!");
                printar(e.getMessage());
            }
        }

        return resultado.toString();
        }

  final public int analisadorSintatico() throws ParseException, ParseEOFException {RecoverySet g = First.analisadorSintatico;
    try {
      comentario(g);
      jj_consume_token(PALAVRA_RESERVADA_PROGRAM);
      jj_consume_token(SIMBOLO_ESPECIAL_ABRECHAVES);
      declaracaoDeConstantesEVariaveis(g);
      corpoDoPrograma(g);
      jj_consume_token(SIMBOLO_ESPECIAL_FECHACHAVES);
      identificadorDoPrograma(g);
semantico.acao1();{if ("" != null) return 0;}
      jj_consume_token(0);
    } catch (ParseException e) {
consumeUntil(g, e, "Erro ao iniciar o analisador sintatico", "analisadorSintatico");
        {if ("" != null) return 1;}
    }
    throw new Error("Missing return statement in function");
}

  final public void comentario(RecoverySet g) throws ParseException, ParseEOFException {RecoverySet recoveryComentario = First.comentario.union(g);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SIMBOLO_ESPECIAL_COMENTARIO:{
        jj_consume_token(SIMBOLO_ESPECIAL_COMENTARIO);
        jj_consume_token(CONSTANTE_LITERAL);
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        ;
      }
    } catch (ParseException e) {
consumeUntil(recoveryComentario, e, "Erro ao declarar comentario de cabecalho", "comentario");
    }
}

  final public void identificadorDoPrograma(RecoverySet g) throws ParseException, ParseEOFException {RecoverySet recoveryIdentificadorDoPrograma = First.identificadorDoPrograma.union(g);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFICADORES:{
        jj_consume_token(IDENTIFICADORES);
semantico.acao2(token.image);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
    } catch (ParseException e) {
consumeUntil(recoveryIdentificadorDoPrograma, e, "Erro ao declarar identificador do programa", "identificadorDoPrograma");
    }
}

  final public void declaracaoDeConstantesEVariaveis(RecoverySet g) throws ParseException, ParseEOFException {RecoverySet recoveryDeclaracaoDeConstantesEVariaveis = First.declaracaoDeConstantesEVariaveis.union(g);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PALAVRA_RESERVADA_DEFINE:{
        jj_consume_token(PALAVRA_RESERVADA_DEFINE);
        jj_consume_token(SIMBOLO_ESPECIAL_ABRECHAVES);
        constantesEVariaveis(recoveryDeclaracaoDeConstantesEVariaveis);
        jj_consume_token(SIMBOLO_ESPECIAL_FECHACHAVES);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
    } catch (ParseException e) {
consumeUntil(recoveryDeclaracaoDeConstantesEVariaveis, e, "Erro ao iniciar declaracao de constantes e variaveis do programa", "declaracaoDeConstantesEVariaveis");
    }
}

  final public void constantesEVariaveis(RecoverySet g) throws ParseException, ParseEOFException {RecoverySet recoveryConstantesEVariaveis = First.constantesEVariaveis.union(g);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PALAVRA_RESERVADA_NOT:{
        declaracaoDeConstantes(recoveryConstantesEVariaveis);
        variaveisLinhaLinha(recoveryConstantesEVariaveis);
        break;
        }
      case PALAVRA_RESERVADA_VARIABLE:{
        declaracaoDeVariaveis(recoveryConstantesEVariaveis);
        constantesLinhaLinha(recoveryConstantesEVariaveis);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
consumeUntil(recoveryConstantesEVariaveis, e, "Erro ao declarar constantes e variaveis", "constantesEVariaveis");
    }
}

  final public void declaracaoDeConstantes(RecoverySet g) throws ParseException, ParseEOFException {RecoverySet recoveryDeclaracaoDeConstantes = First.declaracaoDeConstantes.union(g);
    try {
      jj_consume_token(PALAVRA_RESERVADA_NOT);
      jj_consume_token(PALAVRA_RESERVADA_VARIABLE);
semantico.acao3();
      constantes(recoveryDeclaracaoDeConstantes);
    } catch (ParseException e) {
consumeUntil(recoveryDeclaracaoDeConstantes, e, "Erro ao iniciar declaracao de constante", "declaracaoDeConstantes");
    }
}

  final public void constantes(RecoverySet g) throws ParseException, ParseEOFException {RecoverySet recoveryConstantes = First.constantes.union(g);
    try {
      tipo(recoveryConstantes);
      jj_consume_token(PALAVRA_RESERVADA_IS);
      listaDeIdentificadoresDeConstantes(recoveryConstantes);
semantico.acao4();
      valor(recoveryConstantes);
semantico.acao5(token);
      jj_consume_token(SIMBOLO_ESPECIAL_PONTO);
      constantesLinha(recoveryConstantes);
    } catch (ParseException e) {
consumeUntil(recoveryConstantes, e, "Erro ao declarar constante", "constantes");
    }
}

  final public void constantesLinha(RecoverySet g) throws ParseException, ParseEOFException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PALAVRA_RESERVADA_NATURAL:
    case PALAVRA_RESERVADA_REAL:
    case PALAVRA_RESERVADA_CHAR:
    case PALAVRA_RESERVADA_BOOLEAN:{
      constantes(g);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
}

  final public void constantesLinhaLinha(RecoverySet g) throws ParseException, ParseEOFException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PALAVRA_RESERVADA_NOT:{
      declaracaoDeConstantes(g);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
}

  final public void declaracaoDeVariaveis(RecoverySet g) throws ParseException, ParseEOFException {RecoverySet recoveryDeclaracaoDeVariaveis = First.corpoDoPrograma.union(g);
    try {
      jj_consume_token(PALAVRA_RESERVADA_VARIABLE);
semantico.acao6();
      variaveis(recoveryDeclaracaoDeVariaveis);
    } catch (ParseException e) {
consumeUntil(recoveryDeclaracaoDeVariaveis, e, "Erro ao iniciar declaracao de variaveis", "declaracaoDeVariaveis");
    }
}

  final public void variaveis(RecoverySet g) throws ParseException, ParseEOFException {RecoverySet recoveryVariaveis = First.variaveis.union(g);
    try {
      tipo(recoveryVariaveis);
      jj_consume_token(PALAVRA_RESERVADA_IS);
      listaDeIdentificadoresDeVariaveis(recoveryVariaveis);
semantico.acao4();
      jj_consume_token(SIMBOLO_ESPECIAL_PONTO);
      variaveisLinha(recoveryVariaveis);
    } catch (ParseException e) {
consumeUntil(recoveryVariaveis, e, "Erro ao declarar variavel", "variaveis");
    }
}

  final public void variaveisLinha(RecoverySet g) throws ParseException, ParseEOFException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PALAVRA_RESERVADA_NATURAL:
    case PALAVRA_RESERVADA_REAL:
    case PALAVRA_RESERVADA_CHAR:
    case PALAVRA_RESERVADA_BOOLEAN:{
      variaveis(g);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
}

  final public void variaveisLinhaLinha(RecoverySet g) throws ParseException, ParseEOFException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PALAVRA_RESERVADA_VARIABLE:{
      declaracaoDeVariaveis(g);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
}

  final public void tipo(RecoverySet g) throws ParseException, ParseEOFException {RecoverySet recoveryTipo = First.tipo.union(g);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PALAVRA_RESERVADA_NATURAL:{
        jj_consume_token(PALAVRA_RESERVADA_NATURAL);
semantico.acao7();
        break;
        }
      case PALAVRA_RESERVADA_REAL:{
        jj_consume_token(PALAVRA_RESERVADA_REAL);
semantico.acao8();
        break;
        }
      case PALAVRA_RESERVADA_CHAR:{
        jj_consume_token(PALAVRA_RESERVADA_CHAR);
semantico.acao9();
        break;
        }
      case PALAVRA_RESERVADA_BOOLEAN:{
        jj_consume_token(PALAVRA_RESERVADA_BOOLEAN);
semantico.acao10();
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
consumeUntil(recoveryTipo, e, "Erro ao declarar tipo", "tipo");
    }
}

  final public void listaDeIdentificadoresDeConstantes(RecoverySet g) throws ParseException, ParseEOFException {RecoverySet recoveryListaDeIdentificadoresDeConstantes = First.listaDeIdentificadoresDeConstantes.union(g);
    try {
      jj_consume_token(IDENTIFICADORES);
semantico.acao11(token.image);
      listaDeIdentificadoresDeConstantesLinha(recoveryListaDeIdentificadoresDeConstantes);
    } catch (ParseException e) {
consumeUntil(recoveryListaDeIdentificadoresDeConstantes, e, "Erro ao declarar identificador de constante", "listaDeIdentificadoresDeConstantes");
    }
}

  final public void listaDeIdentificadoresDeConstantesLinha(RecoverySet g) throws ParseException, ParseEOFException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SIMBOLO_ESPECIAL_VIRGULA:{
      jj_consume_token(SIMBOLO_ESPECIAL_VIRGULA);
      listaDeIdentificadoresDeConstantes(g);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
}

  final public void listaDeIdentificadoresDeVariaveis(RecoverySet g) throws ParseException, ParseEOFException {RecoverySet recoveryListaDeIdentificadoresDeVariaveis = First.listaDeIdentificadoresDeVariaveis.union(g);
    try {
      jj_consume_token(IDENTIFICADORES);
semantico.acao12(token.image);
      indice(recoveryListaDeIdentificadoresDeVariaveis);
semantico.acao13();
      listaDeIdentificadoresDeVariaveisLinha(recoveryListaDeIdentificadoresDeVariaveis);
    } catch (ParseException e) {
consumeUntil(recoveryListaDeIdentificadoresDeVariaveis, e, "Erro ao declarar identificador de variavel", "listaDeIdentificadoresDeVariaveis");
    }
}

  final public void listaDeIdentificadoresDeVariaveisLinha(RecoverySet g) throws ParseException, ParseEOFException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SIMBOLO_ESPECIAL_VIRGULA:{
      jj_consume_token(SIMBOLO_ESPECIAL_VIRGULA);
      listaDeIdentificadoresDeVariaveis(g);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
}

  final public void indice(RecoverySet g) throws ParseException, ParseEOFException {RecoverySet recoveryIndice = First.indice.union(g);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SIMBOLO_ESPECIAL_ABRECOLCHETE:{
        jj_consume_token(SIMBOLO_ESPECIAL_ABRECOLCHETE);
        jj_consume_token(CONSTANTE_NUMERICA_INTEIRA);
semantico.acao14(token.image);
        jj_consume_token(SIMBOLO_ESPECIAL_FECHACOLCHETE);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        ;
      }
    } catch (ParseException e) {
consumeUntil(recoveryIndice, e, "Erro ao declarar indice", "indice");
    }
}

  final public void valor(RecoverySet g) throws ParseException, ParseEOFException {RecoverySet recoveryValor = First.valor.union(g);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONSTANTE_NUMERICA_INTEIRA:{
        jj_consume_token(CONSTANTE_NUMERICA_INTEIRA);
        break;
        }
      case CONSTANTE_NUMERICA_REAL:{
        jj_consume_token(CONSTANTE_NUMERICA_REAL);
        break;
        }
      case CONSTANTE_LITERAL:{
        jj_consume_token(CONSTANTE_LITERAL);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
consumeUntil(recoveryValor, e, "Erro ao declarar valor", "valor");
    }
}

  final public void corpoDoPrograma(RecoverySet g) throws ParseException, ParseEOFException {RecoverySet recoveryCorpoDoPrograma = First.corpoDoPrograma.union(g);
    try {
      jj_consume_token(PALAVRA_RESERVADA_EXECUTE);
      jj_consume_token(SIMBOLO_ESPECIAL_ABRECHAVES);
      listaDeComandos(recoveryCorpoDoPrograma);
      jj_consume_token(SIMBOLO_ESPECIAL_FECHACHAVES);
    } catch (ParseException e) {
consumeUntil(recoveryCorpoDoPrograma, e, "Erro ao declarar corpo do programa", "corpoDoPrograma");
    }
}

  final public void listaDeComandos(RecoverySet g) throws ParseException, ParseEOFException {RecoverySet recoveryListaDeComandos = First.listaDeComandos.union(g);
    try {
      comando(recoveryListaDeComandos);
      jj_consume_token(SIMBOLO_ESPECIAL_PONTO);
      listaDeComandosLinha(recoveryListaDeComandos);
    } catch (ParseException e) {
consumeUntil(recoveryListaDeComandos, e, "Erro ao declarar uma lista de comandos", "listaDeComandos");
    }
}

  final public void listaDeComandosLinha(RecoverySet g) throws ParseException, ParseEOFException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PALAVRA_RESERVADA_SET:
    case PALAVRA_RESERVADA_GET:
    case PALAVRA_RESERVADA_PUT:
    case PALAVRA_RESERVADA_LOOP:
    case PALAVRA_RESERVADA_WHILE:
    case PALAVRA_RESERVADA_VERIFY:{
      listaDeComandos(g);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
}

  final public void comando(RecoverySet g) throws ParseException, ParseEOFException {RecoverySet recoveryComando = First.comando.union(g);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PALAVRA_RESERVADA_SET:{
        atribuicao(recoveryComando);
        break;
        }
      case PALAVRA_RESERVADA_GET:{
        entrada(recoveryComando);
        break;
        }
      case PALAVRA_RESERVADA_PUT:{
        saida(recoveryComando);
        break;
        }
      case PALAVRA_RESERVADA_VERIFY:{
        selecao(recoveryComando);
        break;
        }
      case PALAVRA_RESERVADA_LOOP:
      case PALAVRA_RESERVADA_WHILE:{
        repeticao(recoveryComando);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
consumeUntil(recoveryComando, e, "Erro ao declarar comando", "comando");
    }
}

  final public void atribuicao(RecoverySet g) throws ParseException, ParseEOFException {
    try {
      jj_consume_token(PALAVRA_RESERVADA_SET);
semantico.acao15();
      expressao(g);
      jj_consume_token(PALAVRA_RESERVADA_TO);
      listaDeIdentificadoresDeVariaveis(g);
semantico.acao16();
    } catch (ParseException e) {
consumeUntil(g, e, "Erro ao declarar comando de atribuicao", "atribuicao");
    }
}

  final public void entrada(RecoverySet g) throws ParseException, ParseEOFException {
    try {
      jj_consume_token(PALAVRA_RESERVADA_GET);
semantico.acao17();
      jj_consume_token(SIMBOLO_ESPECIAL_ABRECHAVES);
      listaDeIdentificadoresDeVariaveis(g);
      jj_consume_token(SIMBOLO_ESPECIAL_FECHACHAVES);
    } catch (ParseException e) {
consumeUntil(g, e, "Erro ao declarar comando de entrada", "entrada");
    }
}

  final public void saida(RecoverySet g) throws ParseException, ParseEOFException {
    try {
      jj_consume_token(PALAVRA_RESERVADA_PUT);
      jj_consume_token(SIMBOLO_ESPECIAL_ABRECHAVES);
      listaDeIdentificadoresEOuConstantes(g);
      jj_consume_token(SIMBOLO_ESPECIAL_FECHACHAVES);
    } catch (ParseException e) {
consumeUntil(g, e, "Erro ao declarar comando de saida", "saida");
    }
}

  final public void listaDeIdentificadoresEOuConstantes(RecoverySet g) throws ParseException, ParseEOFException {
    try {
      item(g);
semantico.acao18();
      listaDeIdentificadoresEOuConstantesLinha(g);
    } catch (ParseException e) {
consumeUntil(g, e, "Erro ao declarar comando de saida", "saida");
    }
}

  final public void listaDeIdentificadoresEOuConstantesLinha(RecoverySet g) throws ParseException, ParseEOFException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SIMBOLO_ESPECIAL_VIRGULA:{
      jj_consume_token(SIMBOLO_ESPECIAL_VIRGULA);
      listaDeIdentificadoresEOuConstantes(g);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
}

  final public void item(RecoverySet g) throws ParseException, ParseEOFException {RecoverySet recoveryComando = First.item.union(g);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFICADORES:{
        jj_consume_token(IDENTIFICADORES);
semantico.acao19(token.image);
        indice(g);
semantico.acao20();
        break;
        }
      case CONSTANTE_NUMERICA_INTEIRA:{
        jj_consume_token(CONSTANTE_NUMERICA_INTEIRA);
semantico.acao21(token.image);
        break;
        }
      case CONSTANTE_NUMERICA_REAL:{
        jj_consume_token(CONSTANTE_NUMERICA_REAL);
semantico.acao22(token.image);
        break;
        }
      case CONSTANTE_LITERAL:{
        jj_consume_token(CONSTANTE_LITERAL);
semantico.acao23(token.image);
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
consumeUntil(g, e, "Erro ao declarar item no comando PUT", "item");
    }
}

  final public void selecao(RecoverySet g) throws ParseException, ParseEOFException {
    try {
      jj_consume_token(PALAVRA_RESERVADA_VERIFY);
      expressao(g);
      jj_consume_token(PALAVRA_RESERVADA_IS);
      clausulas(g);
semantico.acao24();
    } catch (ParseException e) {
consumeUntil(g, e, "Erro ao declarar comando de selecao", "selecao");
    }
}

  final public void clausulas(RecoverySet g) throws ParseException, ParseEOFException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PALAVRA_RESERVADA_TRUE:{
      jj_consume_token(PALAVRA_RESERVADA_TRUE);
semantico.acao25();
      jj_consume_token(SIMBOLO_ESPECIAL_ABRECHAVES);
      listaDeComandos(g);
      jj_consume_token(SIMBOLO_ESPECIAL_FECHACHAVES);
      falsa(g);
      break;
      }
    case PALAVRA_RESERVADA_FALSE:{
      jj_consume_token(PALAVRA_RESERVADA_FALSE);
semantico.acao26();
      jj_consume_token(SIMBOLO_ESPECIAL_ABRECHAVES);
      listaDeComandos(g);
      jj_consume_token(SIMBOLO_ESPECIAL_FECHACHAVES);
      verdadeira(g);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void verdadeira(RecoverySet g) throws ParseException, ParseEOFException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PALAVRA_RESERVADA_IS:{
      jj_consume_token(PALAVRA_RESERVADA_IS);
      jj_consume_token(PALAVRA_RESERVADA_TRUE);
semantico.acao27();
      jj_consume_token(SIMBOLO_ESPECIAL_ABRECHAVES);
      listaDeComandos(g);
      jj_consume_token(SIMBOLO_ESPECIAL_FECHACHAVES);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
}

  final public void falsa(RecoverySet g) throws ParseException, ParseEOFException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PALAVRA_RESERVADA_IS:{
      jj_consume_token(PALAVRA_RESERVADA_IS);
      jj_consume_token(PALAVRA_RESERVADA_FALSE);
semantico.acao27();
      jj_consume_token(SIMBOLO_ESPECIAL_ABRECHAVES);
      listaDeComandos(g);
      jj_consume_token(SIMBOLO_ESPECIAL_FECHACHAVES);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      ;
    }
}

  final public void repeticao(RecoverySet g) throws ParseException, ParseEOFException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PALAVRA_RESERVADA_LOOP:{
        jj_consume_token(PALAVRA_RESERVADA_LOOP);
semantico.acao28();
        jj_consume_token(SIMBOLO_ESPECIAL_ABRECHAVES);
        listaDeComandos(g);
        jj_consume_token(SIMBOLO_ESPECIAL_FECHACHAVES);
        jj_consume_token(PALAVRA_RESERVADA_WHILE);
        expressao(g);
semantico.acao29();
        jj_consume_token(PALAVRA_RESERVADA_IS);
        jj_consume_token(PALAVRA_RESERVADA_TRUE);
        break;
        }
      case PALAVRA_RESERVADA_WHILE:{
        jj_consume_token(PALAVRA_RESERVADA_WHILE);
semantico.acao30();
        expressao(g);
semantico.acao31();
        jj_consume_token(PALAVRA_RESERVADA_IS);
        jj_consume_token(PALAVRA_RESERVADA_TRUE);
        jj_consume_token(PALAVRA_RESERVADA_DO);
        jj_consume_token(SIMBOLO_ESPECIAL_ABRECHAVES);
        listaDeComandos(g);
        jj_consume_token(SIMBOLO_ESPECIAL_FECHACHAVES);
semantico.acao32();
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
consumeUntil(g, e, "Erro ao declarar comando de repeticao.", "repeticao");
    }
}

  final public void expressao(RecoverySet g) throws ParseException, ParseEOFException {RecoverySet recoveryExpressaoLinha = First.expressao.union(g);
    try {
      expressaoAritmeticaOuLogica(g);
      expressaoLinha(g);
    } catch (ParseException e) {
consumeUntil(recoveryExpressaoLinha, e, "Erro ao declarar expressao.", "expressaoLinha");
    }
}

  final public void expressaoLinha(RecoverySet g) throws ParseException, ParseEOFException {RecoverySet recoveryExpressaoLinha = First.expressao.union(g);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SIMBOLO_ESPECIAL_OPERADOR_IGUALIGUAL:
    case SIMBOLO_ESPECIAL_OPERADOR_DIFERENTE:
    case SIMBOLO_ESPECIAL_OPERADOR_MENOR:
    case SIMBOLO_ESPECIAL_OPERADOR_MAIOR:
    case SIMBOLO_ESPECIAL_OPERADOR_MENORIGUAL:
    case SIMBOLO_ESPECIAL_OPERADOR_MAIORIGUAL:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SIMBOLO_ESPECIAL_OPERADOR_IGUALIGUAL:{
        jj_consume_token(SIMBOLO_ESPECIAL_OPERADOR_IGUALIGUAL);
        expressaoAritmeticaOuLogica(recoveryExpressaoLinha);
semantico.acao33();
        break;
        }
      case SIMBOLO_ESPECIAL_OPERADOR_DIFERENTE:{
        jj_consume_token(SIMBOLO_ESPECIAL_OPERADOR_DIFERENTE);
        expressaoAritmeticaOuLogica(recoveryExpressaoLinha);
semantico.acao34();
        break;
        }
      case SIMBOLO_ESPECIAL_OPERADOR_MENOR:{
        jj_consume_token(SIMBOLO_ESPECIAL_OPERADOR_MENOR);
        expressaoAritmeticaOuLogica(recoveryExpressaoLinha);
semantico.acao35();
        break;
        }
      case SIMBOLO_ESPECIAL_OPERADOR_MAIOR:{
        jj_consume_token(SIMBOLO_ESPECIAL_OPERADOR_MAIOR);
        expressaoAritmeticaOuLogica(recoveryExpressaoLinha);
semantico.acao36();
        break;
        }
      case SIMBOLO_ESPECIAL_OPERADOR_MENORIGUAL:{
        jj_consume_token(SIMBOLO_ESPECIAL_OPERADOR_MENORIGUAL);
        expressaoAritmeticaOuLogica(recoveryExpressaoLinha);
semantico.acao37();
        break;
        }
      case SIMBOLO_ESPECIAL_OPERADOR_MAIORIGUAL:{
        jj_consume_token(SIMBOLO_ESPECIAL_OPERADOR_MAIORIGUAL);
        expressaoAritmeticaOuLogica(recoveryExpressaoLinha);
semantico.acao38();
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      ;
    }
}

  final public void expressaoAritmeticaOuLogica(RecoverySet g) throws ParseException, ParseEOFException {
    termo2(g);
    menorPrioridade(g);
}

  final public void menorPrioridade(RecoverySet g) throws ParseException, ParseEOFException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SIMBOLO_ESPECIAL_OPERADOR_MAIS:
    case SIMBOLO_ESPECIAL_OPERADOR_MENOS:
    case SIMBOLO_ESPECIAL_OPERADOR_OU:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SIMBOLO_ESPECIAL_OPERADOR_MAIS:{
        jj_consume_token(SIMBOLO_ESPECIAL_OPERADOR_MAIS);
        termo2(g);
        menorPrioridade(g);
semantico.acao39();
        break;
        }
      case SIMBOLO_ESPECIAL_OPERADOR_MENOS:{
        jj_consume_token(SIMBOLO_ESPECIAL_OPERADOR_MENOS);
        termo2(g);
        menorPrioridade(g);
semantico.acao40();
        break;
        }
      case SIMBOLO_ESPECIAL_OPERADOR_OU:{
        jj_consume_token(SIMBOLO_ESPECIAL_OPERADOR_OU);
        termo2(g);
        menorPrioridade(g);
semantico.acao41();
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
}

  final public void termo2(RecoverySet g) throws ParseException, ParseEOFException {
    termo1(g);
    mediaPrioridade(g);
}

  final public void mediaPrioridade(RecoverySet g) throws ParseException, ParseEOFException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SIMBOLO_ESPECIAL_OPERADOR_DIVISAO:
    case SIMBOLO_ESPECIAL_OPERADOR_MULTIPLICACAO:
    case SIMBOLO_ESPECIAL_OPERADOR_DIVISAO_INTEIRA:
    case SIMBOLO_ESPECIAL_OPERADOR_DIVISAO_INTEIRA_RESTO:
    case SIMBOLO_ESPECIAL_OPERADOR_E:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SIMBOLO_ESPECIAL_OPERADOR_MULTIPLICACAO:{
        jj_consume_token(SIMBOLO_ESPECIAL_OPERADOR_MULTIPLICACAO);
        termo1(g);
        mediaPrioridade(g);
semantico.acao42();
        break;
        }
      case SIMBOLO_ESPECIAL_OPERADOR_DIVISAO:{
        jj_consume_token(SIMBOLO_ESPECIAL_OPERADOR_DIVISAO);
        termo1(g);
        mediaPrioridade(g);
semantico.acao43();
        break;
        }
      case SIMBOLO_ESPECIAL_OPERADOR_DIVISAO_INTEIRA_RESTO:{
        jj_consume_token(SIMBOLO_ESPECIAL_OPERADOR_DIVISAO_INTEIRA_RESTO);
        termo1(g);
        mediaPrioridade(g);
semantico.acao44();
        break;
        }
      case SIMBOLO_ESPECIAL_OPERADOR_DIVISAO_INTEIRA:{
        jj_consume_token(SIMBOLO_ESPECIAL_OPERADOR_DIVISAO_INTEIRA);
        termo1(g);
        mediaPrioridade(g);
semantico.acao45();
        break;
        }
      case SIMBOLO_ESPECIAL_OPERADOR_E:{
        jj_consume_token(SIMBOLO_ESPECIAL_OPERADOR_E);
        termo1(g);
        mediaPrioridade(g);
semantico.acao46();
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      ;
    }
}

  final public void termo1(RecoverySet g) throws ParseException, ParseEOFException {
    elemento(g);
    maiorPrioridade(g);
}

  final public void maiorPrioridade(RecoverySet g) throws ParseException, ParseEOFException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SIMBOLO_ESPECIAL_OPERADOR_POTENTIACAO:{
      jj_consume_token(SIMBOLO_ESPECIAL_OPERADOR_POTENTIACAO);
      elemento(g);
      maiorPrioridade(g);
semantico.acao47();
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      ;
    }
}

  final public void elemento(RecoverySet g) throws ParseException, ParseEOFException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFICADORES:{
      jj_consume_token(IDENTIFICADORES);
semantico.acao19(token.image);
      indice(g);
semantico.acao20();
      break;
      }
    case CONSTANTE_NUMERICA_INTEIRA:{
      jj_consume_token(CONSTANTE_NUMERICA_INTEIRA);
semantico.acao21(token.image);
      break;
      }
    case CONSTANTE_NUMERICA_REAL:{
      jj_consume_token(CONSTANTE_NUMERICA_REAL);
semantico.acao22(token.image);
      break;
      }
    case CONSTANTE_LITERAL:{
      jj_consume_token(CONSTANTE_LITERAL);
semantico.acao23(token.image);
      break;
      }
    case PALAVRA_RESERVADA_TRUE:{
      jj_consume_token(PALAVRA_RESERVADA_TRUE);
semantico.acao48();
      break;
      }
    case PALAVRA_RESERVADA_FALSE:{
      jj_consume_token(PALAVRA_RESERVADA_FALSE);
semantico.acao49();
      break;
      }
    case SIMBOLO_ESPECIAL_ABREPARENTESES:{
      jj_consume_token(SIMBOLO_ESPECIAL_ABREPARENTESES);
      expressao(g);
      jj_consume_token(SIMBOLO_ESPECIAL_FECHAPARENTESES);
      break;
      }
    case SIMBOLO_ESPECIAL_OPERADOR_NAO:{
      jj_consume_token(SIMBOLO_ESPECIAL_OPERADOR_NAO);
      jj_consume_token(SIMBOLO_ESPECIAL_ABREPARENTESES);
      expressao(g);
      jj_consume_token(SIMBOLO_ESPECIAL_FECHAPARENTESES);
semantico.acao50();
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  /** Generated Token Manager. */
  public AnalisadorTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x1000000,0x4,0x18,0x3c0,0x8,0x3c0,0x10,0x3c0,0x20000000,0x20000000,0x0,0xe000000,0x11e800,0x11e800,0x20000000,0xf000000,0xc0000,0x20,0x20,0x18000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf0c0000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1f800,0x1f800,0x40030,0x40030,0x206c0,0x206c0,0x100,0x80004,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}

  /** Constructor with InputStream. */
  public Analisador(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Analisador(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new AnalisadorTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Analisador(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new AnalisadorTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new AnalisadorTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Analisador(AnalisadorTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalisadorTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[70];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 29; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 70; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
